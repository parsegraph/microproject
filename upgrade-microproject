#!/bin/bash
MICROPROJECT_DIR=$HOME/src/parsegraph/microproject
DEST_DIR=`pwd`

if ! git diff --quiet; then
    echo "Repository has unstaged changes"
    exit 1
fi

CURRENT_MODULES="$CURRENT_MODULES \
    @babel/cli \
    @babel/core \
    @babel/plugin-proposal-class-properties \
    @babel/plugin-proposal-private-property-in-object \
    @babel/preset-env \
    @babel/preset-typescript \
    @babel/register \
    @types/chai \
    @types/node \
    @typescript-eslint/eslint-plugin \
    @typescript-eslint/parser \
    babel-jest \
    babel-loader \
    chai \
    eslint \
    eslint-config-google \
    eslint-config-prettier \
    jest \
    jsdom \
    jsdom-global \
    prettier \
    raw-loader \
    source-map-loader \
    source-map-support \
    ts-loader \
    ts-node \
    typescript \
    typedoc \
    webpack \
    webpack-cli"

GLSL_SCRIPTS=`find $DEST_DIR/src -type f -name '*.glsl'`
if test x"$GLSL_SCRIPTS" != x; then
CURRENT_MODULES="$CURRENT_MODULES \
    glslify-loader \
    ts-shader-loader \
    webgl-mock"
DEFAULT_FILES="src/glsl.d.ts"
else
OBSOLETED_MODULES="$OBSOLETED_MODULES \
    glslify-loader \
    ts-shader-loader \
    webgl-mock"
OBSOLETE_CONFIG="$OBSOLETE_CONFIG src/glsl.d.ts"
fi

OBSOLETED_MODULES="$OBSOLETED_MODULES \
    nyc \
    @istanbuljs/nyc-config-babel \
    babel-plugin-istanbul \
    babel-core \
    babel-register \
    @types/expect \
    @babel/polyfill \
    core-js \
    parsegraph-testsuite \
    @atscm/esdoc-typescript-plugin \
    @types/mocha \
    ts-mocha \
    mocha \
    openssl \
    express \
    esdoc \
    esdoc-standard-plugin"

if test -f package-lock.json; then
    git rm package-lock.json
    yarn install
fi

INSTALLED_OBSOLETE_PACKAGES=""

for mod in $OBSOLETED_MODULES $CURRENT_MODULES; do
    if grep -q -F -e "\"$mod\"" $DEST_DIR/package.json; then
        INSTALLED_OBSOLETE_PACKAGES="$INSTALLED_OBSOLETE_PACKAGES $mod"
    fi
done
yarn remove $INSTALLED_OBSOLETE_PACKAGES
yarn add -D $CURRENT_MODULES
git add yarn.lock
git add package.json

if test $MICROPROJECT_DIR = $DEST_DIR; then
    echo "Microproject dir is the same; not copying files"
    exit
fi

# Files to always upgrade
UPGRADED_FILES="$UPGRADED_FILES \
    Makefile.microproject \
    .github/workflows/dev.js.yml \
    .github/workflows/prod.js.yml \
    webpack.prod.js \
    webpack.common.js \
    Dockerfile \
    .babelrc \
    tsconfig.json \
    tsconfig.prod.json \
    tmuxify.d \
    demo/demo.js \
    demo/package.json \
    demo/yarn.lock"

# Files to upgrade only when missing on dest
DEFAULT_FILES="$DEFAULT_FILES \
    webpack.config.js \
    www/favicon.ico \
    www/demo.html"

# Files to remove entirely
OBSOLETE_CONFIG="$OBSOLETE_CONFIG \
    .github/workflows/node.js.yml \
    .mocharc.yml \
    .prettierrc.json \
    package-lock.json \
    package-prod.json \
    tsconfig.testing.json \
    microproject.js \
    publish.sh"

for f in $UPGRADED_FILES; do
    if test -d $MICROPROJECT_DIR/$f; then
        mkdir -p $DEST_DIR/$f
        cp -v -r $MICROPROJECT_DIR/$f/* $DEST_DIR/$f
        find $DEST_DIR/$f -type f | xargs sed -i "s/TODO-PACKAGE-NAME/`basename $DEST_DIR`/g"
        git add $f
    elif test -f $MICROPROJECT_DIR/$f; then
        cp -v $MICROPROJECT_DIR/$f $DEST_DIR/$f
        sed -i "s/TODO-PACKAGE-NAME/`basename $DEST_DIR`/g" $f
        git add $f
    fi
done

for f in $DEFAULT_FILES; do
    if ! test -e $DEST_DIR/$f; then
        mkdir -p `dirname $DEST_DIR/$f`
        cp -i -v -r -u $MICROPROJECT_DIR/$f $DEST_DIR/$f
        sed -i "s/TODO-PACKAGE-NAME/`basename $DEST_DIR`/g" $f
        git add $f
    fi
done

for f in $OBSOLETE_CONFIG; do
    test ! -f $f || git rm $f
done
