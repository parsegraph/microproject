DEST_LIB = dist/parsegraph-$(DIST_NAME).lib.js
PROD_LIB = dist/parsegraph-$(DIST_NAME).js

CLEAN_FILES = \
	dist \
	dist-types \
	dist-prod \
	parsegraph-$(DIST_NAME)-dev.tgz \
	parsegraph-$(DIST_NAME)-prod.tgz

CONFIG_FILES = \
	Makefile \
	Makefile.microproject \
	yarn.lock \
	package.json \
	package-prod.json \
	tsconfig.json \
	tsconfig.prod.json \
	.babelrc \
	microproject.js \
	webpack.prod.js \
	webpack.config.js

all: build lint test coverage doc

build: $(DEST_LIB)
.PHONY: build

autobuild:
	npx webpack --watch --config webpack.config.js
.PHONY: autobuild

install-deps:
	yarn install --immutable --immutable-cache --check-cache
.PHONY: install-deps

build-prod: $(PROD_LIB)
.PHONY: build-prod

demo: $(DEST_LIB)
	node demo/demo.js
.PHONY: demo

check:
	npx jest
.PHONY: check

test: check
.PHONY: test

autotest:
	npx jest --watch
.PHONY: autotest

coverage:
	npx jest --coverage --coverageDirectory=dist/coverage --coveragePathIgnorePatterns=demo
.PHONY: coverage

prettier:
	npx prettier --write src test demo
.PHONY: prettier

lint:
	npx eslint --fix $(SCRIPT_FILES)
.PHONY: lint

doc:
	npx typedoc src/index.ts --out ./dist/docs
.PHONY: doc

build-container:
	podman build . -t parsegraph-$(DIST_NAME)
.PHONY: build-container

run-container: build-container stop-container
	podman run -e SITE_ROOT=$(DEMO_ROOT) -w /usr/src/ --name parsegraph-$(DIST_NAME) -it -p$(DEMO_PORT):3000 localhost/parsegraph-$(DIST_NAME):latest make demo
.PHONY: run-container

stop-container:
	podman stop parsegraph-$(DIST_NAME); podman rm parsegraph-$(DIST_NAME); true
.PHONY: stop-container

tar: parsegraph-$(DIST_NAME)-dev.tgz
.PHONY: tar

tar-prod: parsegraph-$(DIST_NAME)-prod.tgz
.PHONY: tar

wait:
	inotifywait -e modify -r $(CONFIG_FILES) $(SCRIPT_FILES)
.PHONY: wait

clean:
	rm -rf $(CLEAN_FILES)
.PHONY: clean

$(DEST_LIB): $(SCRIPT_FILES)
	npx webpack --config webpack.config.js
	mv -v dist-types/src/* dist/
	mv dist/index.d.ts dist/parsegraph-$(DIST_NAME).d.ts
	mv dist/index.d.ts.map dist/parsegraph-$(DIST_NAME).d.ts.map

$(PROD_LIB): package.json yarn.lock $(SCRIPT_FILES)
	NODE_ENV=production TS_NODE_PROJECT=tsconfig.prod.json npx webpack --config webpack.prod.js
	mv -v dist-types/src/* dist-prod/
	mv dist-prod/index.d.ts dist-prod/parsegraph-$(DIST_NAME).d.ts
	mv dist-prod/index.d.ts.map dist-prod/parsegraph-$(DIST_NAME).d.ts.map

BUILD=parsegraph-$(DIST_NAME)

EXTRA_FILES = \
	LICENSE \
	package.json \
	yarn.lock

parsegraph-$(DIST_NAME)-dev.tgz: $(DEST_LIB)
	mkdir $(BUILD)
	cp -r -t $(BUILD) $(EXTRA_FILES) dist/
	rm -rf $(BUILD)/coverage
	rm -rf $(BUILD)/docs
	sed -E -i 's/("version"\s*:\s*")([0-9.]+)("\s*,\s*)$$/\1\2-dev\3/g' $(BUILD)/package.json
	tar cvzf $@ $(BUILD)/
	rm -rf $(BUILD)

parsegraph-$(DIST_NAME)-prod.tgz: $(PROD_LIB)
	mkdir $(BUILD)
	cp -r -t $(BUILD) $(EXTRA_FILES)
	cp -r dist-prod/ $(BUILD)/dist
	tar cvzf $@ $(BUILD)/
	rm -rf $(BUILD)
